#region Целые

// Существует четыре типа целых чисел со знаком, 
// которые можно использовать в зависимости от того,
// насколько большое(или маленькое) число нужно хранить

// Целые числа со знаком
sbyte int8 = 2;   // от -128 дo +127
short int16 = 1;  // от -32768 дo +32767
int int32 = 0;    // от -2^31 дo +2^31-1 >>> от -2 147 483 648 до +2 147 483 647
long int64 = -1;  // от -2^63 дo +2^63-1 >>> от -9 223 372 036 854 775 808 до +9 223 372 036 854 775 807

// Типы без знака можно использовать, если нужно хранить только положительные значения

// Целые числа без знака
byte uInt8 = 0;     // от 0 дo 255
ushort uInt16 = 1;  // от 0 дo 65535
uint uInt32 = 2;    // от 0 дo 2^32-1 >>> от 0 до 4 294 967 296
ulong uInt64 = 3;   // от 0 дo 2^64-1 >>> от 0 до 18 446 744 073 709 551 616

/* Из них наиболее используемые int, long, byte */

// Замечание 1 Работает с C# 7.0
// В дополнение к стандартной десятичной записи, целые числа также могут быть
// записаны с использованием шестнадцатеричная и двоичная формы записи.
// Для шестнадцатеричной нужно использовать префикс 0x
// Для двоичной нужно использовать префикс 0b

// Пример
int hexNumber = 0x7C6;          // 0x7C6 - это 1990 в десятичной форме записи
Console.WriteLine(hexNumber);   // 1990

int binNumber = 0b11100;        // 0b11100 - это 28 в десятичной форме записи
Console.WriteLine(binNumber);   // 28

// Замечание 2 Работает с C# 7.0
// Добавлено использование разделителей цифр (_) для улучшения читабельности длинных чисел.
// Этот разделитель цифр может появляться в любом месте числа
int number = 1000000000;
int _number = 1_000_000_000;

#endregion

#region С плавающей точкой

// Типы с плавающей точкой могут хранить действительные числа с разной точностью.

// Постоянные числа с плавающей точкой в C# всегда сохраняются как переменные типа double,
// Для использования типа float требуется в конце добавить символ F или f 
// Аналогично для типа decimal требуется в конце добавить символ M или m 
// Аналогично для типа double добавление в конце символа D или d необязательно 

// Пример
float floatVariable = 3.14f;
double doubleVariable = 3.14;
decimal decimalVariable = 3.14M;
var str = "Машинное округление: " + (0.1m + 0.2m);
Console.WriteLine(str);

var variable = 10;

// Тип float принимает значения От ±1,5 x 10^(−45) до ±3,4 x 10^38 точность - 7 цифр

floatVariable = 1.12345678910f;
Console.WriteLine(floatVariable); // 1.1234567

// Тип double принимает значения  От от ±5,0 × 10^(−324) до ±1,7 × 10^308 точность - 15 цифр

doubleVariable = 1.1234567898765431d;
Console.WriteLine(doubleVariable); // 1,12345678987654

// Тип decimal принимает значения от ±1,0 x 10^(-28) до ±7,9228 x 10^28 точность - 28 цифр

decimalVariable = 1.12345678912345678901234567891234m;
Console.WriteLine(decimalVariable); // 1,1234567891234567890123456789

#endregion

#region Char

// Тип char может содержать один Unicode-символ 
char VarChar1 = 'a'; Console.WriteLine(VarChar1); // a
char VarChar2 = 'ю'; Console.WriteLine(VarChar2); // ю
char VarChar3 = '!'; Console.WriteLine(VarChar3); // !
char VarChar4 = '&'; Console.WriteLine(VarChar4); // &
char VarChar5 = '9'; Console.WriteLine(VarChar5); // 9
char VarChar6 = '§'; Console.WriteLine(VarChar6); // 󠅒󠅒

#endregion

#region Логические

// Тип bool может хранить логическое значение, которое принимает значение 
// правда или ложь. 
// Эти значения указываются с ключевыми словами true и false

bool flag = true;   // переменной flag присвоить истину
flag = false;       // переменной flag присвоить ложь

// Тип данных string используется для хранения строковых констант.
// Они обрамляются двойными кавычками. 

string word = "Привет!";
word = "Привет, мир!";
var singleSymbol = "s";

for (int i = 0; i < word.Length; i++)
{
	var current = word[i];
	Console.WriteLine(current);
}

#endregion
/* На практике достаточно int, long, double, decimal, char, string, bool*/